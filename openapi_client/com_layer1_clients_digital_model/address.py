# coding: utf-8

"""
    Digital Asset

    Layer1 API making management of crypto assets simple and easy

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.balance import Balance
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Address
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="internal id")
    address: Optional[StrictStr] = Field(default=None, description="blockchain address")
    asset_pool_id: Optional[StrictStr] = Field(default=None, description="asset pool id", alias="assetPoolId")
    network: Optional[StrictStr] = Field(default=None, description="crypto network")
    key_pair_id: Optional[StrictStr] = Field(default=None, description="key pair id", alias="keyPairId")
    reference: Optional[StrictStr] = Field(default=None, description="key pair reference")
    supported_assets: Optional[List[StrictStr]] = Field(default=None, description="list of assets supported by network", alias="supportedAssets")
    aliases: Optional[List[StrictStr]] = Field(default=None, description="alternative address (e.g. BTC has segwitt and legacy format)")
    tag: Optional[StrictStr] = Field(default=None, description="destination tag that serves as optional payment identifier. Only applicable to select networks like Ripple, Solana etc.")
    balances: Optional[List[Balance]] = Field(default=None, description="address balances")
    customer_id: Optional[StrictStr] = Field(default=None, description="custom non-unique identifier supplied for address that is used to link address to external entity like customer", alias="customerId")
    master: Optional[StrictBool] = Field(default=None, description="flag indicating whether this address is asset pool master address")
    supported_networks: Optional[List[StrictStr]] = Field(default=None, description="list of networks supporting given asset. mutually exclusive with network and supportedAssets", alias="supportedNetworks")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "address", "assetPoolId", "network", "keyPairId", "reference", "supportedAssets", "aliases", "tag", "balances", "customerId", "master", "supportedNetworks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in balances (list)
        _items = []
        if self.balances:
            for _item_balances in self.balances:
                if _item_balances:
                    _items.append(_item_balances.to_dict())
            _dict['balances'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "address": obj.get("address"),
            "assetPoolId": obj.get("assetPoolId"),
            "network": obj.get("network"),
            "keyPairId": obj.get("keyPairId"),
            "reference": obj.get("reference"),
            "supportedAssets": obj.get("supportedAssets"),
            "aliases": obj.get("aliases"),
            "tag": obj.get("tag"),
            "balances": [Balance.from_dict(_item) for _item in obj["balances"]] if obj.get("balances") is not None else None,
            "customerId": obj.get("customerId"),
            "master": obj.get("master"),
            "supportedNetworks": obj.get("supportedNetworks")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


