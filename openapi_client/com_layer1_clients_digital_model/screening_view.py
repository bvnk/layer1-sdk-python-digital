# coding: utf-8

"""
    Digital Asset

    Layer1 API making management of crypto assets simple and easy

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.participant import Participant
from openapi_client.models.screening_metadata import ScreeningMetadata
from openapi_client.models.transaction_metadata import TransactionMetadata
from typing import Optional, Set
from typing_extensions import Self

class ScreeningView(BaseModel):
    """
    ScreeningView
    """ # noqa: E501
    transaction_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the transaction", alias="transactionId")
    transaction_hash: Optional[StrictStr] = Field(default=None, description="Blockchain transaction hash", alias="transactionHash")
    transaction_status: Optional[StrictStr] = Field(default=None, description="Current status of the transaction", alias="transactionStatus")
    network: Optional[StrictStr] = Field(default=None, description="Network code used for the transaction")
    transaction_metadata: Optional[TransactionMetadata] = Field(default=None, description="Transaction metadata in JSON format", alias="transactionMetadata")
    transaction_created_at: Optional[datetime] = Field(default=None, description="Timestamp when the transaction was created", alias="transactionCreatedAt")
    transaction_updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the transaction was last updated", alias="transactionUpdatedAt")
    screening_state: Optional[StrictStr] = Field(default=None, description="Screening state of the transaction", alias="screeningState")
    screening_reason: Optional[StrictStr] = Field(default=None, description="Reason for the screening result", alias="screeningReason")
    screening_reason_code: Optional[StrictStr] = Field(default=None, description="Reason code for the screening result", alias="screeningReasonCode")
    screening_created_at: Optional[datetime] = Field(default=None, description="Timestamp when the screening was created", alias="screeningCreatedAt")
    screening_updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the screening was last updated", alias="screeningUpdatedAt")
    screening_metadata: Optional[ScreeningMetadata] = Field(default=None, description="Screening metadata in JSON format", alias="screeningMetadata")
    participants: Optional[List[Participant]] = Field(default=None, description="List of participants involved in the transaction")
    operation: Optional[StrictStr] = Field(default=None, description="Operation type for the screening")
    address_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the address involved in the screening", alias="addressId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["transactionId", "transactionHash", "transactionStatus", "network", "transactionMetadata", "transactionCreatedAt", "transactionUpdatedAt", "screeningState", "screeningReason", "screeningReasonCode", "screeningCreatedAt", "screeningUpdatedAt", "screeningMetadata", "participants", "operation", "addressId"]

    @field_validator('transaction_status')
    def transaction_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BLOCKED', 'CONFIRMED', 'CREATED', 'DETECTED', 'FAILED', 'FUNDS_RESERVED', 'HELD', 'REJECTED', 'SCREENING_PASSED', 'SCREENING_REQUESTED', 'SIGNED', 'SUCCESS', 'UNCONFIRMED', 'REPLACED', 'unknown_default_open_api']):
            raise ValueError("must be one of enum values ('BLOCKED', 'CONFIRMED', 'CREATED', 'DETECTED', 'FAILED', 'FUNDS_RESERVED', 'HELD', 'REJECTED', 'SCREENING_PASSED', 'SCREENING_REQUESTED', 'SIGNED', 'SUCCESS', 'UNCONFIRMED', 'REPLACED', 'unknown_default_open_api')")
        return value

    @field_validator('screening_state')
    def screening_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPROVED', 'REJECTED', 'PENDING_SCREENING', 'unknown_default_open_api']):
            raise ValueError("must be one of enum values ('APPROVED', 'REJECTED', 'PENDING_SCREENING', 'unknown_default_open_api')")
        return value

    @field_validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPOSIT', 'WITHDRAWAL', 'CONSOLIDATION', 'RETURN', 'STAKE', 'UNSTAKE', 'DELEGATE', 'UNDELEGATE', 'RELEASE', 'unknown_default_open_api']):
            raise ValueError("must be one of enum values ('DEPOSIT', 'WITHDRAWAL', 'CONSOLIDATION', 'RETURN', 'STAKE', 'UNSTAKE', 'DELEGATE', 'UNDELEGATE', 'RELEASE', 'unknown_default_open_api')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScreeningView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_metadata
        if self.transaction_metadata:
            _dict['transactionMetadata'] = self.transaction_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of screening_metadata
        if self.screening_metadata:
            _dict['screeningMetadata'] = self.screening_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in participants (list)
        _items = []
        if self.participants:
            for _item_participants in self.participants:
                if _item_participants:
                    _items.append(_item_participants.to_dict())
            _dict['participants'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScreeningView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionId": obj.get("transactionId"),
            "transactionHash": obj.get("transactionHash"),
            "transactionStatus": obj.get("transactionStatus"),
            "network": obj.get("network"),
            "transactionMetadata": TransactionMetadata.from_dict(obj["transactionMetadata"]) if obj.get("transactionMetadata") is not None else None,
            "transactionCreatedAt": obj.get("transactionCreatedAt"),
            "transactionUpdatedAt": obj.get("transactionUpdatedAt"),
            "screeningState": obj.get("screeningState"),
            "screeningReason": obj.get("screeningReason"),
            "screeningReasonCode": obj.get("screeningReasonCode"),
            "screeningCreatedAt": obj.get("screeningCreatedAt"),
            "screeningUpdatedAt": obj.get("screeningUpdatedAt"),
            "screeningMetadata": ScreeningMetadata.from_dict(obj["screeningMetadata"]) if obj.get("screeningMetadata") is not None else None,
            "participants": [Participant.from_dict(_item) for _item in obj["participants"]] if obj.get("participants") is not None else None,
            "operation": obj.get("operation"),
            "addressId": obj.get("addressId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


