# coding: utf-8

"""
    Digital Asset

    Layer1 API making management of crypto assets simple and easy

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.network_detail import NetworkDetail
from openapi_client.models.participant import Participant
from openapi_client.models.transaction_metadata import TransactionMetadata
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Transaction
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="transaction id")
    address: Optional[Address] = Field(default=None, description="address involved in the transaction")
    reference: Optional[StrictStr] = Field(default=None, description="custom identifier supplied for transaction that is used to link transaction to specific customer or use case")
    status: Optional[StrictStr] = Field(default=None, description="transaction status")
    sources: Optional[List[Participant]] = Field(default=None, description="list of addresses and amounts that fund the transaction")
    destinations: Optional[List[Participant]] = Field(default=None, description="list of recipient addresses and amounts that benefit from the transaction")
    type: Optional[StrictStr] = Field(default=None, description="transaction type")
    asset: Optional[StrictStr] = Field(default=None, description="currency")
    amount: Optional[Any] = None
    hash: Optional[StrictStr] = Field(default=None, description="blockchain transaction hash")
    network_detail: Optional[NetworkDetail] = Field(default=None, description="network details of the transaction", alias="networkDetail")
    metadata: Optional[TransactionMetadata] = Field(default=None, description="metadata about the transaction")
    created_at: Optional[datetime] = Field(default=None, description="timestamp when transaction was created", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="timestamp when transaction was updated", alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "address", "reference", "status", "sources", "destinations", "type", "asset", "amount", "hash", "networkDetail", "metadata", "createdAt", "updatedAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BLOCKED', 'CONFIRMED', 'CREATED', 'DETECTED', 'FAILED', 'FUNDS_RESERVED', 'HELD', 'REJECTED', 'SCREENING_PASSED', 'SCREENING_REQUESTED', 'SIGNED', 'SUCCESS', 'UNCONFIRMED', 'REPLACED', 'unknown_default_open_api']):
            raise ValueError("must be one of enum values ('BLOCKED', 'CONFIRMED', 'CREATED', 'DETECTED', 'FAILED', 'FUNDS_RESERVED', 'HELD', 'REJECTED', 'SCREENING_PASSED', 'SCREENING_REQUESTED', 'SIGNED', 'SUCCESS', 'UNCONFIRMED', 'REPLACED', 'unknown_default_open_api')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPOSIT', 'WITHDRAWAL', 'CONSOLIDATION', 'RETURN', 'STAKE', 'UNSTAKE', 'DELEGATE', 'UNDELEGATE', 'RELEASE', 'unknown_default_open_api']):
            raise ValueError("must be one of enum values ('DEPOSIT', 'WITHDRAWAL', 'CONSOLIDATION', 'RETURN', 'STAKE', 'UNSTAKE', 'DELEGATE', 'UNDELEGATE', 'RELEASE', 'unknown_default_open_api')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item_destinations in self.destinations:
                if _item_destinations:
                    _items.append(_item_destinations.to_dict())
            _dict['destinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_detail
        if self.network_detail:
            _dict['networkDetail'] = self.network_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "reference": obj.get("reference"),
            "status": obj.get("status"),
            "sources": [Participant.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "destinations": [Participant.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "type": obj.get("type"),
            "asset": obj.get("asset"),
            "amount": obj.get("amount"),
            "hash": obj.get("hash"),
            "networkDetail": NetworkDetail.from_dict(obj["networkDetail"]) if obj.get("networkDetail") is not None else None,
            "metadata": TransactionMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


