# coding: utf-8

"""
    Digital Asset

    Layer1 API making management of crypto assets simple and easy

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.com_layer1_clients_digital_model.address import Address

class TestAddress(unittest.TestCase):
    """Address unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Address:
        """Test Address
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Address`
        """
        model = Address()
        if include_optional:
            return Address(
                id = '',
                address = 'bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq',
                asset_pool_id = '',
                network = 'BITCOIN',
                key_pair_id = '',
                reference = '',
                supported_assets = [BTC],
                aliases = [1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa],
                tag = '123456789',
                balances = [
                    openapi_client.models.balance.Balance(
                        network = 'BITCOIN', 
                        asset = 'BTC', 
                        available = null, 
                        reserved = null, 
                        blockchain = null, )
                    ],
                customer_id = 'cust123456789',
                master = True,
                supported_networks = [ETHEREUM]
            )
        else:
            return Address(
        )
        """

    def testAddress(self):
        """Test Address"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
