# coding: utf-8

"""
    Digital Asset

    Layer1 API making management of crypto assets simple and easy

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.com_layer1_clients_digital_model.transaction import Transaction

class TestTransaction(unittest.TestCase):
    """Transaction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Transaction:
        """Test Transaction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Transaction`
        """
        model = Transaction()
        if include_optional:
            return Transaction(
                id = '',
                address = openapi_client.models.address.Address(
                    id = '', 
                    asset_pool_id = '', 
                    network = 'BITCOIN', 
                    key_pair_id = '', 
                    reference = '', 
                    supported_assets = [BTC], 
                    aliases = [1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa], 
                    tag = '123456789', 
                    balances = [
                        openapi_client.models.balance.Balance(
                            network = 'BITCOIN', 
                            asset = 'BTC', 
                            available = null, 
                            reserved = null, 
                            blockchain = null, )
                        ], 
                    customer_id = 'cust123456789', 
                    master = True, 
                    supported_networks = [ETHEREUM], ),
                reference = 'myUniqueRef333',
                status = 'BLOCKED',
                sources = [
                    openapi_client.models.participant.Participant(
                        address = '0x1234567890abcdef1234567890abcdef12345678', 
                        amount = null, 
                        asset = 'ETH', 
                        tag = '123456789', )
                    ],
                destinations = [
                    openapi_client.models.participant.Participant(
                        address = '0x1234567890abcdef1234567890abcdef12345678', 
                        amount = null, 
                        asset = 'ETH', 
                        tag = '123456789', )
                    ],
                type = 'DEPOSIT',
                asset = 'USDT',
                amount = None,
                hash = '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
                network_detail = openapi_client.models.network_detail.NetworkDetail(
                    block = openapi_client.models.block_detail.BlockDetail(
                        number = 123456, 
                        timestamp = '2021-01-01T00:00:00Z', ), 
                    fee = openapi_client.models.asset_value.AssetValue(
                        amount = null, 
                        asset = 'BTC', ), ),
                metadata = openapi_client.models.transaction_metadata.TransactionMetadata(
                    failure = openapi_client.models.failure.Failure(
                        reason = 'INSUFFICIENT_FUNDS', 
                        message = 'insufficient funds on address 0x1234567890abcdef1234567890abcdef12345678', ), ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return Transaction(
        )
        """

    def testTransaction(self):
        """Test Transaction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
